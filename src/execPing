#!/usr/bin/perl
use strict;
use warnings;

sub attemptPing($$$$);
sub logWatchdog($);

my $defaultDeadline = 1;
my $defaultDelay = 1;
my $defaultTimeout = 0;
my $defaultAttempts = 0;
my $defaultWatchdogAttempts = 5;

my $watchdogLog = "/tmp/ping_watchdog.log";

my $defaultUrl = "eff.org";

my $quiet = 0;

my $usage = "Usage:
  $0 [OPTS]
    Tests if URL is ping-able. Prints \"ok: URL\" or \"failed: URL\"
      default URL: $defaultUrl

  $0 [OPTS] EXEC [ARG ARG ..]
    Ensure that URL is ping-able before running command \"EXEC ARG ARG ..\"
    Does not run command if URL is not ping-able
      default URL: $defaultUrl

  OPTS:
    --url=URL
      use URL instead of $defaultUrl

    --watchdog
      Instead of normal behaviour, ping URL forever.
      If URL fails to ping after WATCHDOG_ATTEMPTS attempts,
        run the given command, wait for it to finish,
        and resume pinging forever.
      Will not run (or rerun) the failure command until a successful ping.
      Logs failures to $watchdogLog.
      Must specify a command.
      Ignores --attempts and --timeout arguments.

    --watchdog-attempts=INTEGER {default is $defaultWatchdogAttempts}
      sets the number of attempts before running the given command

    --cmd-on-fail-only
      run command \"EXEC ARG ARG..\" ONLY if URL is NOT ping-able

    --deadline=INTEGER          {default is $defaultDeadline}
      seconds to wait for a response for each ping

    --delay=INTEGER             {default is $defaultDelay}
      seconds to wait between failed pings

    --timeout=INTEGER           {default is $defaultTimeout}
      seconds to wait before failing, 0 means forever

    --attempts=INTEGER          {default is $defaultAttempts}
      number of times to attempt a ping, 0 means forever

    --ipmagic=IPMAGIC_CONF
      use IPMAGIC_CONF as an ipmagic config, and use
        `ipmagic IPMAGIC_CONF --ip` as URL
      also, if the IP is not ping-able, tries SSH as a fallback

    -q|--quiet
      print less to STDOUT and STDERR
";

sub main(@){
  my $url = $defaultUrl;
  my $watchdog = 0;
  my $watchdogAttempts = $defaultWatchdogAttempts;
  my $cmdOnFailOnly = 0;
  my $deadline = $defaultDeadline;
  my $delay = $defaultDelay;
  my $timeout = $defaultTimeout;
  my $attempts = $defaultAttempts;
  my $ipmagicConf = undef;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $opt = shift;
    if($opt =~ /^--url=(.*)$/){
      $url = $1;
    }elsif($opt =~ /^--watchdog$/){
      $watchdog = 1;
    }elsif($opt =~ /^--watchdog-attempts=(\d+)$/){
      $watchdogAttempts = $1;
    }elsif($opt =~ /^--cmd-on-fail-only$/){
      $cmdOnFailOnly = 1;
    }elsif($opt =~ /^--deadline=(\d+)$/){
      $deadline = $1;
    }elsif($opt =~ /^--delay=(\d+)$/){
      $delay = $1;
    }elsif($opt =~ /^--timeout=(\d+)$/){
      $timeout = $1;
    }elsif($opt =~ /^--attempts=(\d+)$/){
      $attempts = $1;
    }elsif($opt =~ /^--ipmagic=(.*)$/){
      $ipmagicConf = $1;
    }elsif($opt =~ /^(-q|--quiet)$/){
      $quiet = 1;
    }else{
      die $usage;
    }
  }

  my $exec = shift;
  my @args = @_;

  my $hasCommand = defined $exec;

  if($watchdog){
    die $usage if not $hasCommand;
    my $failed = 1;
    while(1){
      my $rem = $watchdogAttempts;
      while(not attemptPing $url, $ipmagicConf, $deadline, $quiet){
        if($rem == 0){
          last;
        }
        $rem--;
        print STDERR `date` if not $quiet;
        print STDERR "ping failed, retrying...\n" if not $quiet;
        sleep $delay;
      }
      my $prevFailed = $failed;
      $failed = $rem == 0;

      if(not $prevFailed and $failed){
        logWatchdog "ping failure: running $exec @args";
        my @cmd = ($exec, @args);
        s/'/'\\''/g foreach @cmd;
        @cmd = map {"'$_'"} @cmd;
        system "@cmd 2>&1 | tee -a $watchdogLog";
      }elsif($prevFailed and $failed){
        logWatchdog "ping failure: ignoring until successful ping\n";
      }elsif($prevFailed and not $failed){
        logWatchdog "successful ping: will run $exec @args on next failure\n";
      }
    }
  }

  my $start = time;
  my $count = 0;
  my $failed = 0;
  while(not attemptPing $url, $ipmagicConf, $deadline, $quiet){
    $count++;
    my $isTimeout = $timeout > 0 && time - $start > $timeout;
    my $isMaxAttempts = $attempts > 0 && $count >= $attempts;
    if($isTimeout or $isMaxAttempts){
      $failed = 1;
      last;
    }
    print STDERR "ping failed, retrying...\n" if not $quiet;
    sleep $delay;
  }

  if($failed){
    if($hasCommand){
      if($cmdOnFailOnly){
        print STDERR "ping failed with cmd-on-fail-only, running command\n" if not $quiet;
        exec $exec, @args;
      }else{
        die "timeout reached, exiting\n";
      }
    }else{
      print "failed: $url\n";
      exit 1;
    }
  }else{
    if($hasCommand){
      if($cmdOnFailOnly){
        print STDERR "ping successful, not running command\n" if not $quiet;
      }else{
        exec $exec, @args;
      }
    }else{
      print "ok: $url\n";
      exit 0;
    }
  }
}

sub logWatchdog($){
  my $msg = shift;
  my $d = `date`;
  chomp $d;
  open FH, ">> $watchdogLog";
  print FH "$d $msg\n";
  close FH;
  print STDERR "$d $msg\n" if not $quiet;
}

sub attemptPing($$$$){
  my ($url, $ipmagicConf, $deadline, $quiet) = @_;
  if(defined $ipmagicConf){
    $url = `ipmagic "$ipmagicConf" --ip`;
    chomp $url;
    print "Using \"$url\"\n" if not $quiet;
  }
  $url =~ s/'/'\\''/g;
  system "ping -c 1 -w $deadline -W $deadline '$url' >/dev/null 2>/dev/null";
  my $success = $? == 0;
  if(not $success and defined $ipmagicConf){
    system "ipmagic", $ipmagicConf, "echo ssh $ipmagicConf success!\n";
    $success = $? == 0;
  }
  return $success;
}

&main(@ARGV);
