#!/usr/bin/perl
use strict;
use warnings;
use File::Basename qw(basename);

sub selectFile(@);
sub dieConfig($;$);
sub unquote($);
sub parseLine($);
sub fuzzy($);

my $home = defined $ENV{HOME} ? $ENV{HOME} : '';

my $netConf = selectFile ("$home/wifi.conf", "/etc/wifi.conf");
my $autoConf = selectFile ("$home/wifi-auto.conf", "/etc/wifi-auto.conf");

my $quotedStr = '"(?:[^"]|"")*"';
my $unquotedStr = '[^ \t"]*';
my $str = "(?:$quotedStr|$unquotedStr)";
my $lineRegex = qr/^\s*($str)\s*($str)\s*($str)\s*($str)\s*\n$/;

my $wscanExec = "wscan";
my $validEncs = "wep|wpa|wpa2|none";
my $encDefault = 'none';
my $validModes = "ad-hoc|managed|master|repeater|secondary|monitor|auto";
my $modeDefault = 'managed';
my $okAtts = join "|", qw( dev driver );

my $EXEC = basename $0;

my $usage = "Usage:
  $EXEC -h|--help
    show this message

  $EXEC [OPTS] SSID
  $EXEC [OPTS] --info SSID
    -search $netConf
    -find an entry with SSID like <SSID>, case insensitive, with '_' matching '_' or ' '
    -print exact ssid, enc, key, mode, and auto

  $EXEC [OPTS] --scan|--scanned|--wscan|--last-scan SSID
    -fetch the latest scan with `$wscanExec -l`
    -find a cell with SSID like <SSID>, case insensitive, with '_' matching '_' or ' '
    -print exact ssid, enc, and mode

  $EXEC [OPTS] --list|--list-conf|--list-all
    -fetch all entries in $netConf
    -convert SSIDs to lowercase and replace ' ' with '_'
    -print converted SSIDs, one per line

  $EXEC [OPTS] --list-auto|--auto
    -fetch all auto-connecting SSIDs from $autoConf
    -convert SSIDs to lowercase and replace ' ' with '_'
    -print converted SSIDs and auto-priorities, in decreasing order of priority

  $EXEC [OPTS] --get-att --att=CONF_ATT_NAME
  $EXEC [OPTS] --att=CONF_ATT_NAME
    -find '<CONF_ATT_NAME>=<VALUE>' line in $netConf
    -print the <VALUE> if found, or nothing if it is absent

  CONF_ATT_NAME
    driver
      the driver for wpa_supplicant {see wpa_supplicant -h}
    dev
      a comma-separated list of \"DEV_TYPE:DEV_NAME\" pairs
      these are read by ifdev and override using ifconfig
        e.g.:   dev=wl:wlp2s3,wlan:eth4,eth:eth5

  OPTS
    --exact
      Always print exact ssid, and match ssid exactly
";

my $format = ''
  . "Lines are either attributes or wireless entries\n"
  . "Valid attributes: $okAtts\n"
  . "Wireless Entries are one per line:\n"
  . "SSID ENC KEY MODE\n"
  . "Attributes are whitespace-separated, doublequoted strings\n"
  . " any amount of leading and trailing whitespace/tabs is permitted\n"
  . " a literal doublequote character is represented by \"\"\n"
  . " double-quotes may be omitted if an att has no \"s or whitespace\n"
  . "Lines beginning with #s {or some whitespace and then a #} are ignored\n"
  . "SSID: <required> essid\n"
  . "ENC:  <optional> encryption mode {default = \"$encDefault\"}\n"
  . "      one of $validEncs \n"
  . "KEY:  <optional> wpa or wep key {default = \"\"}\n"
  . "      ASCII wep keys need 's:' at the front. hex keys do not.\n"
  . "      wpa PSK/TKIP keys cannot be given in hex; this is bad, probably\n"
  . "MODE: <optional> wifi mode {default = \"$modeDefault\"}\n"
  . "      one of $validModes\n"
;

my $COMMAND_INFO = "info";
my $COMMAND_SCAN = "scan";
my $COMMAND_LIST_CONF = "list-conf";
my $COMMAND_LIST_AUTO = "list-auto";
my $COMMAND_GET_ATT = "get-att";

sub main(@){
  my $cmd;
  my $targetSSID = undef;
  my $targetAtt = undef;
  my $exact = 0;
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-h|--help)$/){
      print $usage;
      exit 0;
    }elsif($arg =~ /^(--info)$/){
      $cmd = $COMMAND_INFO;
    }elsif($arg =~ /^(--scanned|--scan|--wscan|--last-scan)$/){
      $cmd = $COMMAND_SCAN;
    }elsif($arg =~ /^(--list|--list-conf|--list-all)$/){
      $cmd = $COMMAND_LIST_CONF;
    }elsif($arg =~ /^(--list-auto|--auto)$/){
      $cmd = $COMMAND_LIST_AUTO;
    }elsif($arg =~ /^(--get-att)$/){
      $cmd = $COMMAND_GET_ATT;
    }elsif($arg =~ /^--att=($okAtts)$/){
      $cmd = $COMMAND_GET_ATT;
      $targetAtt = $1;
    }elsif($arg =~ /^(--exact)$/){
      $exact = 1;
    }else{
      if(defined $targetSSID){
        die "$usage\nERROR: multiple SSIDs given \"$targetSSID\" \"$arg\"\n";
      }
      $targetSSID = $arg;
    }
  }

  $cmd = "info" if not defined $cmd;

  my %entries;
  my %fuzzyEntries;
  my %attributes;
  open FH, "< $netConf" or die "Could not open $netConf for reading\n";
  my @lines = <FH>;
  close FH;
  for my $line(@lines){
    next if $line =~ /^\s*(#|$)/;
    if($line =~ /^\s*($okAtts)\s*=\s*(.*?)\s*$/){
      $attributes{$1} = $2;
      next;
    }
    my $entry = parseLine $line;
    my $ssid = $$entry[0];
    $entries{$ssid} = $entry;
    $fuzzyEntries{fuzzy($ssid)} = $entry;
  }

  my $count = 1;
  my @autoLines = `cat $autoConf 2>/dev/null` if defined $autoConf;
  my %autos = map{chomp; ($_ => $count++)} @autoLines;

  if($cmd eq $COMMAND_INFO){
    die "ERROR: must specify SSID for $cmd\n" if not defined $targetSSID;
    die "ERROR: cannot specify CONF_ATT_NAME for $cmd\n" if defined $targetAtt;
    my $entry = $entries{$targetSSID};
    if(not defined $entry and not $exact){
      $entry = $fuzzyEntries{fuzzy $targetSSID};
    }
    if(defined $entry){
      my ($ssid, $enc, $key, $mode) = @{$entry};
      my $auto = defined $autos{$ssid} ? $autos{$ssid} : '';
      print "ssid:$ssid\nenc:$enc\nkey:$key\nmode:$mode\nauto:$auto\n";
    }else{
      print STDERR "SSID NOT FOUND: $targetSSID\n";
    }
  }elsif($cmd eq $COMMAND_SCAN){
    die "ERROR: must specify SSID for $cmd\n" if not defined $targetSSID;
    die "ERROR: cannot specify CONF_ATT_NAME for $cmd\n" if defined $targetAtt;
    my @cells = `$wscanExec -l --info`;
    for my $cell(@cells){
      if($cell =~ /^(.*),(\d+\%),(ch\d+),($validEncs),($validModes),(.*)$/i){
        my ($ssid, $qual, $chan, $enc, $mode, $note) = ($1, $2, $3, $4, $5, $6);
        my $found = 0;
        $found = 1 if $exact and $ssid eq $targetSSID;
        $found = 1 if not $exact and fuzzy($ssid) eq fuzzy($targetSSID);
        if($found){
          print "ssid:$ssid\nenc:$enc\nmode:$mode\n";
        }
      }else{
        die "ERROR: malformed cell $cell\n";
      }
    }
  }elsif($cmd eq $COMMAND_LIST_CONF){
    die "ERROR: cannot specify SSID for $cmd\n" if defined $targetSSID;
    die "ERROR: cannot specify CONF_ATT_NAME for $cmd\n" if defined $targetAtt;
    my @ssids = sort $exact ? keys %entries : keys %fuzzyEntries;
    print join("\n", @ssids) . "\n";
  }elsif($cmd eq $COMMAND_LIST_AUTO){
    die "ERROR: cannot specify SSID for $cmd\n" if defined $targetSSID;
    die "ERROR: cannot specify CONF_ATT_NAME for $cmd\n" if defined $targetAtt;
    for my $ssid(sort {$autos{$a} <=> $autos{$b}} keys %autos){
      my $ssidFmt = $exact ? $ssid : fuzzy($ssid);
      print "$autos{$ssid}:$ssidFmt\n";
    }
  }elsif($cmd eq $COMMAND_GET_ATT){
    die "ERROR: cannot specify SSID for $cmd\n" if defined $targetSSID;
    die "ERROR: must specify CONF_ATT_NAME for $cmd\n" if not defined $targetAtt;
    print "$attributes{$targetAtt}\n" if defined $attributes{$targetAtt};
    exit 0;
  }else{
    die $usage;
  }
}

sub dieConfig($;$){
  my $line = shift();
  my $reason = shift() || '';
  die "Malformed line in $netConf\n$format\nLine: '$line'\n$reason\n";
}
sub unquote($){
  my $s = shift;
  $s =~ s/^"|"$//g;
  $s =~ s/""/"/g;
  return $s;
}
sub parseLine($){
  my $line = shift;
  if($line =~ $lineRegex){
    my ($ssid, $enc, $key, $mode) = map {unquote $_} ($1, $2, $3, $4);
    $enc = $encDefault if $enc eq '';
    $mode = $modeDefault if $mode eq '';
    if(length $ssid == 0){
      dieConfig $line, "Error: SSID is empty";
    }elsif($enc !~ /^($validEncs)$/i){
      dieConfig $line, "Error: invalid: ENC $enc\n";
    }elsif($mode !~ /^($validModes)$/i){
      dieConfig $line, "Error: invalid: MODE $mode\n";
    }
    return [$ssid, $enc, $key, $mode];
  }else{
    dieConfig $line;
  }
}
sub fuzzy($){
  my $s = shift;
  $s = lc $s;
  $s =~ tr/ /_/;
  return $s;
}
sub selectFile(@){
  for my $file(@_){
    return $file if -e $file;
  }
  return undef;
}

&main(@ARGV);
