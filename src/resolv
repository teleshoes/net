#!/usr/bin/perl
#Copyright 2010,2012,2015,2017 Elliot Wolk
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
use strict;
use warnings;

sub applyConfigName($);
sub getAvailableConfigs();
sub removeResolv();
sub replaceResolv($$);

my $home = defined $ENV{HOME} ? $ENV{HOME} : "";

my $targetFile = '/etc/resolv.conf';
my $configDir = "$home/resolv";
my $okConfigs = join "|", getAvailableConfigs();
my $stateFile = "/etc/resolv.conf.confname";

my $usage = "Usage:
  $0 [CONFIG_NAME]   {available: $okConfigs}
    Copies $configDir/resolv.conf.CONFIG_NAME to $targetFile,
      and makes it read-only with chattr +i.
    Write CONFIG_NAME to $stateFile
    CONFIG_NAME must be [a-z]+ {lowercase letters only}.
    'default' is assumed if CONFIG_NAME is omitted.

  $0 FILE_NAME
    Copies FILE_NAME to $targetFile
      and makes it read-only with chattr +i
    Write FILE_NAME to $stateFile

  $0 -g|--get
    cat $stateFile

  $0 -c|--cycle CONFIG_NAME [CONFIG_NAME CONFIG_NAME CONFIG_NAME ...]
    read CURRENT from $stateFile and cycle between the configs:
      if CURRENT is the last CONFIG_NAME passed in, set the first CONFIG_NAME
      if CURRENT is one of the other CONFIG_NAMEs passed in, set the next CONFIG_NAME
      if CURRENT is empty, missing, or not one of the CONFIG_NAMEs, set the first CONFIG_NAME

  $0 -d
    Removes $targetFile
";

sub main(@){
  if(@_ == 1 and $_[0] =~ /^-d$/){
    removeResolv();
    exit 0;
  }elsif(@_ == 1 and -f $_[0]){
    my $file = $_[0];
    print "resolv: applying $file:\n====\n";
    system "cat", $file;
    my $confName = $file;
    replaceResolv $confName, $file;
  }elsif(not -d $configDir){
    print STDERR "WARN: $configDir does not exist, skipping resolv\n";
  }elsif(@_ == 0){
    applyConfigName "default";
  }elsif(@_ == 1 and $_[0] =~ /^($okConfigs)$/){
    applyConfigName $_[0];
  }elsif(@_ == 1 and $_[0] =~ /^(-g|--get)$/){
    system "cat", $stateFile;
  }elsif(@_ >= 2 and $_[0] =~ /^(-c|--cycle)$/){
    my ($cycleArg, @configNames) = @_;

    my $nextConfName;
    my $cur = `cat $stateFile 2>/dev/null`;
    chomp $cur;
    for(my $i=0; $i<@configNames; $i++){
      my $confName = $configNames[$i];
      if($confName =~ /^$cur$/i){
        my $targetIndex = $i+1;
        $targetIndex = 0 if $targetIndex > @configNames;
        $nextConfName = $configNames[$targetIndex];
        last;
      }
    }
    if(not defined $nextConfName){
      $nextConfName = $configNames[0];
    }
    if($nextConfName =~ /^($okConfigs)$/){
      print "resolv: \"$cur\" => \"$nextConfName\"\n";
      applyConfigName $nextConfName;
    }else{
      die "ERROR: \"$nextConfName\" is not a valid config name\n";
    }
  }else{
    die $usage;
  }
}

sub applyConfigName($){
  my ($confName) = @_;
  my $file = "$configDir/resolv.conf.$confName";
  print "resolv: applying $confName";
  if(-l $file){
    my $link = `ls -l $file`;
    if($link =~ /-> .*resolv\.conf\.([a-z]+)/){
      my $realChoice = $1;
      print " => $realChoice";
    }
  }
  print "\n";

  replaceResolv $confName, $file;
}

sub getAvailableConfigs(){
  my @configs;
  for my $file(`ls -1 $configDir/ 2>/dev/null`){
    push @configs, $1 if $file =~ /resolv\.conf\.([a-z]+)/;
  }
  return @configs;
}

sub removeResolv(){
  if(-e $targetFile){
    system "chattr", "-i", $targetFile;
    system "rm", "-f", $targetFile;
    system "rm", $stateFile;
  }
}

sub replaceResolv($$){
  my ($confName, $file) = @_;
  removeResolv();
  system "cp", $file, $targetFile;
  system "chattr", "+i", $targetFile;
  open FH, "> $stateFile" or die "ERROR: could not write $stateFile\n$!\n";
  print FH "$confName\n";
  close FH;
}

&main(@ARGV);
