#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my $lastScanFilePrefix = "/tmp/wscan-last-";
my $dev = `ifdev wlan`;
chomp $dev;
my $winfoExec = 'winfo';

my $encs = join '|', qw(wpa wpa2 wep none);
my $modes = join '|', qw(ad-hoc managed master repeater secondary monitor auto);
my $formats = join "|", qw(--pretty --info --ssids --fuzzy);

my $usage = "Usage:
  $0 [--now] [--retry] [$formats]
    perform a scan immediately
  $0 -l|--last [$formats]
    print results of last scan
  $0 <DELAY_INT> [--retry] [$formats]
    perform a scan only if last scan is <DELAY_INT> seconds old

  --retry retries every second forever until a scan is successful
  --pretty {DEFAULT} prints SSID, QUAL, CHAN, ENC, MODE, and NOTE in a table
  --info prints \"SSID,QUAL,CHAN,ENC,MODE,NOTE\"
  --ssids prints \"SSID\"
  --fuzzy prints \"FUZZY\"
    SSID is the exact ssid
    FUZZY is the ssid in lowercase with ' ' replaced with '_'
    QUAL is the signal quality in percent: an integer followed by '%'
    CHAN is the channel for the WLAN frequency: an integer preceded by 'ch'
    ENC is [$encs]
    MODE is [$modes]
    NOTE is '[new]' if ssid is unknown
            '[auto###]' if ssid is in auto
            '' otherwise
";

sub scanNow($);
sub scanLast();
sub scanRecent($$);

sub getLastScanFile();
sub attemptClearLastScanFiles();
sub newLastScanFile();
sub formatScan($$);
sub formatCell($$);
sub cellSort($$);
sub parseCell($);
sub trimPad($$);

sub main(@){
  my $iwlist;
  my $format = '--pretty';
  if(@_ > 0 and $_[-1] =~ /^($formats)$/){
    $format = pop;
  }

  my $retry = 0;
  if(@_ > 0 and $_[-1] =~ /^--retry$/){
    $retry = 1;
    pop;
  }


  my $sched = shift;
  $sched = '--now' if not defined $sched;

  die $usage if @_ > 0;
  if($sched eq '--now'){
    $iwlist = scanNow $retry;
  }elsif($sched =~ /^(-l|--last)$/ and $retry == 0){
    $iwlist = scanLast;
  }elsif($sched =~ /^\d+$/){
    $iwlist = scanRecent $sched, $retry;
  }else{
    die $usage;
  }

  print formatScan $iwlist, $format;
}

sub scanNow($){
  my $retry = shift;
  system "sudo ifconfig $dev up";
  my $iwlist;
  do{
    $iwlist = `sudo iwlist $dev scan`;
    $retry = 0 if $? == 0;
    sleep 1 if $retry;
  }while($retry);

  exit 1 if $? != 0;
  if($iwlist =~ s/^$dev\s*Scan completed :\n//){
    attemptClearLastScanFiles();
    my $lastScanFile = newLastScanFile();
    open FH, "> $lastScanFile";
    print FH $iwlist;
    close FH;
  }
  return $iwlist;
}
sub scanLast(){
  my $lastScanFile = getLastScanFile();
  if(defined $lastScanFile and -e $lastScanFile){
    return `cat $lastScanFile`;
  }else{
    die "No scan file exists\n";
  }
}
sub scanRecent($$){
  my $delay = shift;
  my $retry = shift;
  my $scanDate = 0;
  my $lastScanFile = getLastScanFile();
  if(defined $lastScanFile and -e $lastScanFile){
    $scanDate = `stat --format %Y $lastScanFile`;
    chomp $scanDate;
    $scanDate = 0 if not $scanDate =~ /^\d+$/;
  }else{
    print STDERR "no previous scan exists, scanning...\n";
    return scanNow $retry;
  }
  my $now = `date +%s`;
  my $elapsed = $now - $scanDate;
  print STDERR "last scan is ${elapsed}s old; ";
  if($elapsed > $delay){
    print STDERR "exceeds the limit of ${delay}s, rescanning...\n";
    return scanNow $retry;
  }else{
    print STDERR "within limit of ${delay}s, skipping scan\n";
    return scanLast;
  }
  exit 0;
}

sub getLastScanFile(){
  my @files = `ls $lastScanFilePrefix*`;
  map {chomp} @files;
  return @files == 0 ? undef : $files[-1];
}
sub attemptClearLastScanFiles(){
  system "rm -f $lastScanFilePrefix* 2>/dev/null";
}
sub newLastScanFile(){
  return $lastScanFilePrefix . int(time * 1000);
}

sub formatScan($$){
  my $iwlist = shift;
  my $format = shift;

  my @cells = split /          Cell \d+ - /, $iwlist;
  shift @cells;

  my @parsedCells = map {parseCell $_} @cells;
  my %auto = map {chomp; s/^(\d+)://; $_ => $1}
    `$winfoExec --exact --list-auto`;
  my %all = map {chomp; $_ => 1}
    `$winfoExec --exact --list-all`;

  for my $cell(@parsedCells){
    my $note = '';
    if(defined $auto{$$cell{SSID}}){
      $note = "[auto$auto{$$cell{SSID}}]";
    }elsif(not defined $all{$$cell{SSID}}){
      $note = "[new]";
    }
    $$cell{NOTE} = $note;
  }

  @parsedCells = sort {cellSort $a, $b} @parsedCells;

  my @fmtCells = map {formatCell($format, $_) . "\n"} @parsedCells;
  return join '', @fmtCells;
}

sub formatCell($$){
  my ($format, $c) = @_;
  if($format eq '--pretty'){
    return ''
      . trimPad($$c{SSID},       20) . " | "
      . trimPad($$c{QUALITY},     4) . " | "
      . trimPad($$c{CHANNEL},     5) . " | "
      . trimPad($$c{ENCRYPTION},  4) . " | "
      . trimPad($$c{MODE},        9) . " | "
      . trimPad($$c{NOTE},        9) . " | "
    ;
  }elsif($format eq '--info'){
    return "$$c{SSID},$$c{QUALITY},$$c{CHANNEL},$$c{ENCRYPTION},$$c{MODE},$$c{NOTE}";
  }elsif($format eq '--ssids'){
    return $$c{SSID};
  }elsif($format eq '--fuzzy'){
    my $fuzzySSID = lc $$c{SSID};
    $fuzzySSID =~ tr/ /_/;
    return $fuzzySSID;
  }
}

sub cellSort($$){
  my ($a, $b) = @_;
  return (0
    or $$a{ENCRYPTION} cmp $$b{ENCRYPTION}
    or ($$b{QUALITY}=~/(\d+)/)[0] <=> ($$a{QUALITY}=~/(\d+)/)[0]
    or $$a{SSID} cmp $$b{SSID}
  );
}

sub parseCell($){
  my $cell = shift;
  $cell =~ /\s*ESSID:"(.*)"/;
  my $essid = $1;
  $cell =~ /\s*Quality=(\d+)\/(\d+)/;
  my $quality = $2 == 0 ? '?' : int($1*100/$2)."%";
  my $channel = "ch$1" if $cell =~ /Channel:(\d+)/;
  $channel = "ch?" if not defined $channel;
  $cell =~ /\s*Encryption key:(.*)/;
  my $enc;
  if($1 eq 'on'){
    if($cell =~ /WPA2/){
      $enc = 'WPA2';
    }elsif($cell =~ /WPA/){
      $enc = 'WPA';
    }else{
      $enc = 'WEP';
    }
  }else{
    $enc = 'NONE';
  }
  $cell =~ /\s*Mode:(.*)/;
  my $mode = lc $1;
  $mode = 'auto' if $mode !~ /^($modes)$/;
  return {
    SSID => $essid,
    QUALITY => $quality,
    CHANNEL => $channel,
    ENCRYPTION => $enc,
    MODE => $mode,
  };
}

sub trimPad($$){
  my ($s, $l) = @_;
  if(length $s > $l){
    $s = substr($s, 0, $l-2) . "..";
  }
  return $s . ' 'x($l - length $s);
}

&main(@ARGV);
