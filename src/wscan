#!/usr/bin/perl
use strict;
use warnings;
use Time::HiRes qw(time);

my $lastScanFilePrefix = "/tmp/wscan-last-";
my $winfoExec = 'winfo';

my $encs = join '|', qw(wpa wpa2 wep none);
my $modes = join '|', qw(ad-hoc managed master repeater secondary monitor auto);
my $formats = join "|", qw(--pretty --info --ssids --fuzzy);

my $usage = "Usage:
  $0 [--now] [--retry] [$formats]
    perform a scan immediately
  $0 -l|--last [$formats]
    print results of last scan
  $0 <DELAY_INT> [--retry] [$formats]
    perform a scan only if last scan is <DELAY_INT> seconds old

  --retry retries every second forever until a scan is successful
  --pretty {DEFAULT} prints SSID, QUAL, CHAN, ENC, MODE, and NOTE in a table
  --info prints \"SSID,QUAL,CHAN,ENC,MODE,NOTE\"
  --ssids prints \"SSID\"
  --fuzzy prints \"FUZZY\"
    SSID is the exact ssid
    FUZZY is the ssid in lowercase with ' ' replaced with '_'
    QUAL is the signal quality in percent: an integer followed by '%'
    CHAN is the channel for the WLAN frequency: an integer preceded by 'ch'
    ENC is [$encs]
    MODE is [$modes]
    NOTE is '[new]' if ssid is unknown
            '[auto###]' if ssid is in auto
            '' otherwise
";

sub scanNow($$);
sub scanLast($);
sub scanRecent($$$);

sub getLastScanFile($);
sub attemptClearLastScanFiles($);
sub newLastScanFile($);
sub formatScan($$$);
sub formatCell($$);
sub cellSort($$);
sub parseCell($);
sub dBmToQuality($);
sub freqToChannel($);
sub trim($$);
sub pad($$);
sub trimPad($$);

sub main(@){
  my $dev = `ifdev wl wlan`;
  chomp $dev;
  die "could not find wlan dev\n" if $dev !~ /\w+/;

  my $iwScan;
  my $format = '--pretty';
  if(@_ > 0 and $_[-1] =~ /^($formats)$/){
    $format = pop;
  }

  my $retry = 0;
  if(@_ > 0 and $_[-1] =~ /^--retry$/){
    $retry = 1;
    pop;
  }


  my $sched = shift;
  $sched = '--now' if not defined $sched;

  die $usage if @_ > 0;
  if($sched eq '--now'){
    $iwScan = scanNow $retry, $dev;
  }elsif($sched =~ /^(-l|--last)$/ and $retry == 0){
    $iwScan = scanLast $dev;
  }elsif($sched =~ /^\d+$/){
    $iwScan = scanRecent $sched, $retry, $dev;
  }else{
    die $usage;
  }

  print formatScan $iwScan, $format, $dev;
}

sub scanNow($$){
  my ($retry, $dev) = @_;

  system "sudo ifconfig $dev up";
  my $iwScan;
  do{
    $iwScan = `sudo iw dev $dev scan`;
    $retry = 0 if $? == 0;
    sleep 1 if $retry;
  }while($retry);

  exit 1 if $? != 0;
  if($iwScan =~ /BSS.*\(on $dev\)/){
    attemptClearLastScanFiles($dev);
    my $lastScanFile = newLastScanFile($dev);
    open FH, "> $lastScanFile";
    print FH $iwScan;
    close FH;
  }
  return $iwScan;
}
sub scanLast($){
  my ($dev) = @_;
  my $lastScanFile = getLastScanFile($dev);
  if(defined $lastScanFile and -e $lastScanFile){
    return `cat $lastScanFile`;
  }else{
    die "No scan file exists\n";
  }
}
sub scanRecent($$$){
  my ($delay, $retry, $dev) = @_;

  my $scanDate = 0;
  my $lastScanFile = getLastScanFile($dev);
  if(defined $lastScanFile and -e $lastScanFile){
    $scanDate = `stat --format %Y $lastScanFile`;
    chomp $scanDate;
    $scanDate = 0 if not $scanDate =~ /^\d+$/;
  }else{
    print STDERR "no previous scan exists, scanning...\n";
    return scanNow $retry, $dev;
  }
  my $now = `date +%s`;
  my $elapsed = $now - $scanDate;
  print STDERR "last scan is ${elapsed}s old; ";
  if($elapsed > $delay){
    print STDERR "exceeds the limit of ${delay}s, rescanning...\n";
    return scanNow $retry, $dev;
  }else{
    print STDERR "within limit of ${delay}s, skipping scan\n";
    return scanLast $dev;
  }
  exit 0;
}

sub getLastScanFile($){
  my ($dev) = @_;
  my @files = `ls $lastScanFilePrefix$dev-*`;
  map {chomp} @files;
  return @files == 0 ? undef : $files[-1];
}
sub attemptClearLastScanFiles($){
  my ($dev) = @_;
  system "rm -f $lastScanFilePrefix$dev-* 2>/dev/null";
}
sub newLastScanFile($){
  my ($dev) = @_;
  return "$lastScanFilePrefix$dev-" . int(time * 1000);
}

sub formatScan($$$){
  my ($iwScan, $format, $dev) = @_;

  my @lines = map {"$_\n"} split /\n/, $iwScan;
  my @cells;
  my $cell = undef;
  for my $line(@lines){
    if($line =~ /^BSS.*\(on $dev\)/){
      push @cells, $cell if defined $cell;
      $cell = $line;
    }elsif($line =~ /^\t/){
      if(not defined $cell){
        die "malformed iw scan, missing header line\n";
      }
      $cell .= $line;
    }else{
      die "malformed iw scan, could not parse line:\n$line";
    }
  }
  push @cells, $cell if defined $cell;

  my @parsedCells = map {parseCell $_} @cells;
  my %auto = map {chomp; s/^(\d+)://; $_ => $1}
    `$winfoExec --exact --list-auto`;
  my %all = map {chomp; $_ => 1}
    `$winfoExec --exact --list-all`;

  for my $cell(@parsedCells){
    my $note = '';
    if(defined $auto{$$cell{SSID}}){
      $note = "[auto$auto{$$cell{SSID}}]";
    }elsif(not defined $all{$$cell{SSID}}){
      $note = "[new]";
    }
    $$cell{NOTE} = $note;
  }

  @parsedCells = sort {cellSort $a, $b} @parsedCells;

  my @fmtCells = map {formatCell($format, $_) . "\n"} @parsedCells;
  return join '', @fmtCells;
}

sub formatCell($$){
  my ($format, $c) = @_;
  if($format eq '--pretty'){
    my $ssid = $$c{SSID};
    if($ssid =~ /\x00|\\x00/){
      $ssid = "{contains nulls}";
    }
    return ''
      .     pad($ssid,           32) . " | "
      . trimPad($$c{QUALITY},     4) . " | "
      . trimPad($$c{CHANNEL},     5) . " | "
      . trimPad($$c{ENCRYPTION},  4) . " | "
      . trimPad($$c{MODE},        9) . " | "
      . trimPad($$c{NOTE},        9) . " | "
    ;
  }elsif($format eq '--info'){
    return "$$c{SSID},$$c{QUALITY},$$c{CHANNEL},$$c{ENCRYPTION},$$c{MODE},$$c{NOTE}";
  }elsif($format eq '--ssids'){
    return $$c{SSID};
  }elsif($format eq '--fuzzy'){
    my $fuzzySSID = lc $$c{SSID};
    $fuzzySSID =~ tr/ /_/;
    return $fuzzySSID;
  }
}

sub cellSort($$){
  my ($a, $b) = @_;
  return (0
    or $$a{ENCRYPTION} cmp $$b{ENCRYPTION}
    or ($$b{QUALITY}=~/(\d+)/)[0] <=> ($$a{QUALITY}=~/(\d+)/)[0]
    or $$a{SSID} cmp $$b{SSID}
  );
}

sub parseCell($){
  my $cell = shift;

  my $ssid = $1 if $cell =~ /^\t*SSID: (.*)/m;
  $ssid = "" if not defined $ssid;

  my $dBm = $1 if $cell =~ /^\t*signal: (-?\d+(?:\.\d+)?) dBm$/m;
  my $quality = dBmToQuality $dBm;

  my $channel = $1 if $cell =~ /^\t* \* primary channel: (\d+)$/m;
  if(not defined $channel){
    my $freq = $1 if $cell =~ /^\t*freq: (\d+(?:\.\d+)?)$/m;
    $channel = freqToChannel $freq if defined $freq;
  }
  $channel = defined $channel ? "ch$channel" : "ch?";

  my $enc;
  if($cell =~ /^\t*RSN:/m){
    $enc = 'WPA2';
  }elsif($cell =~ /^\t*WPA:/m){
    $enc = 'WPA';
  }elsif($cell =~ /^\t*capability:.*Privacy/m){
    $enc = 'WEP';
  }else{
    $enc = 'NONE';
  }

  my $mode;
  if($cell =~ /^\t*capability:.*ESS/m){
    $mode = "master";
  }elsif($cell =~ /^\t*capability:.*IBSS/m){
    $mode = "ad-hoc";
  }else{
    $mode = "auto";
  }

  return {
    SSID => $ssid,
    QUALITY => $quality,
    CHANNEL => $channel,
    ENCRYPTION => $enc,
    MODE => $mode,
  };
}

sub dBmToQuality($){
  my $dBm = shift;
  #this is what iwlist does
  my $quality = (110.0 + $dBm) / 70.0;
  $quality = int(100.0 * $quality);
  $quality = 0 if $quality < 0;
  $quality = 100 if $quality > 100;
  return "$quality%";
}

sub freqToChannel($){
  my $freq = shift;

  my $freqChans = {
    "2412" => 1,
    "2417" => 2,
    "2422" => 3,
    "2427" => 4,
    "2432" => 5,
    "2437" => 6,
    "2442" => 7,
    "2447" => 8,
    "2452" => 9,
    "2457" => 10,
    "2462" => 11,
    "2467" => 12,
    "2472" => 13,
    "2484" => 14,

    "3657.5" => 131,
    "3660.0" => 132,
    "3662.5" => 132,
    "3665.0" => 133,
    "3667.5" => 133,
    "3670.0" => 134,
    "3672.5" => 134,
    "3675.0" => 135,
    "3677.5" => 135,
    "3680.0" => 136,
    "3682.5" => 136,
    "3685.0" => 137,
    "3687.5" => 137,
    "3690.0" => 138,
    "3692.5" => 138,

    "5035" => 7,
    "5040" => 8,
    "5045" => 9,
    "5055" => 11,
    "5060" => 12,
    "5080" => 16,
    "5170" => 34,
    "5180" => 36,
    "5190" => 38,
    "5200" => 40,
    "5210" => 42,
    "5220" => 44,
    "5230" => 46,
    "5240" => 48,
    "5250" => 50,
    "5260" => 52,
    "5270" => 54,
    "5280" => 56,
    "5290" => 58,
    "5300" => 60,
    "5310" => 62,
    "5320" => 64,
    "5500" => 100,
    "5510" => 102,
    "5520" => 104,
    "5530" => 106,
    "5540" => 108,
    "5550" => 110,
    "5560" => 112,
    "5570" => 114,
    "5580" => 116,
    "5590" => 118,
    "5600" => 120,
    "5610" => 122,
    "5620" => 124,
    "5630" => 126,
    "5640" => 128,
    "5660" => 132,
    "5670" => 134,
    "5680" => 136,
    "5690" => 138,
    "5700" => 140,
    "5710" => 142,
    "5720" => 144,
    "5745" => 149,
    "5755" => 151,
    "5765" => 153,
    "5775" => 155,
    "5785" => 157,
    "5795" => 159,
    "5805" => 161,
    "5825" => 165,
    "4915" => 183,
    "4920" => 184,
    "4925" => 185,
    "4935" => 187,
    "4940" => 188,
    "4945" => 189,
    "4960" => 192,
    "4980" => 196,
  };

  return $$freqChans{$freq};
}

sub trim($$){
  my ($s, $l) = @_;
  if(length $s > $l){
    $s = substr($s, 0, $l-2) . "..";
  }
  return $s;
}
sub pad($$){
  my ($s, $l) = @_;
  my $padLen = $l - length $s;
  if($padLen > 0){
    $s = $s . ' 'x$padLen;
  }
  return $s;
}
sub trimPad($$){
  my ($s, $l) = @_;
  return pad(trim($s, $l), $l);
}

&main(@ARGV);
